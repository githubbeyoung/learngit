touch 操作记录.txt   创建一个操作记录的文本，用来记录执行的操作

git init   将这个目录变成git管理的仓库

git add fileName   将这个文件添加到git的暂存区

git commit -m 'remark' 将暂存区内容一次性提交到工作区间

git commit -am ‘remark’ 合并 add 和 commit 命令,前提该文件是被跟踪的文件，未被跟踪的文件--即新创建的文件不能使用这个合并命令

git config user.username 'username'   设置用户名
git config user.email 'email@xxx.com'   设置邮箱

git log 查看历史记录
git reflog 记录每次的命令，也能查看 commit_id ，commit_id 可用于回退或恢复到指定版本

git reset --hard HEAD^ 回退到上一个版本
git reset --hard HEAD^^ 回退到上两个版本
git reset --hard HEAD~10 回退到上10个版本
git reset --hard commit_id 回退或恢复到指定版本，commit_id 不必写全，git会自动查找

git diff HEAD -- fineName 查看工作区和版本库里面最新版本区别

小结：git中有工作区和暂存区，每次add命令，将工作区的内容添加到暂存区，commit的时候，将暂存区的内容提交到git版本库中，如果修改的内容不用git add到暂存区，commit就不会提交到版本库

git checkout -- fileName  撤销修改，工作区间内修改了文件内容，但是并没有提交到暂存区，即没有add，用这个命令直接撤销修改.注意 这个命令的 -- 很重要，没有它就变成切换到另一个分支的命令

#如何从git上删除一个文件，下面三个命令就完成了删除操作，也可省略git add fileName 命令，也可完成删除操作
rm fileName / git rm fileName 从工作区删除文件
git add fileName / git add . 将工作区的修改添加到暂存区
git commit -m 'xxx' 将暂存区的数据提交到版本库

#添加远程仓库 
1.登录GitHub，在GitHub上创建一个Git仓库
2.在Repository name 上填入一个仓库名，起一个learngit点击创建
3.在本地仓库下运行 git remote add origin git@github.com:GitHub账户名/learngit.git，本地仓库关联远程仓库
4.git push -u origin master，将本地仓库所有内容推送到远程仓库上

将本地仓库内容推送到远程，用git push 命令，实际是把当前分支master推送到远程，由于远程仓库是空的，第一次
推送master分支时，加上-u参数，git不但会把本地的master分支内容推送到远程的新的master分支，还会把本地的分支
和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令

#拉取远程仓库上的内容
git pull

#从远程仓库拉取内容
1.登录GitGub,在上面创建一个新的仓库，如果已经有一个仓库，则直接拉取该仓库内容
2.新建一个文件夹，打开Git Base Here（按住Shift键，鼠标右击选择）,在命令窗口输入
  命令：git clone git@github.com:GitHub账户名/仓库名.git ,项目就从远程拉取到本地

#分支管理 创建与合并分支
git branch dev  创建一个dev分支
git checkout dev  切换到dev分支
git checkout -b dev   创建并切换到dev分支，相当于合并以上两条命令

git branch  列出所有分支，当前分支前面会标一个*号

--把dev分支的工作成果合并到master上
1.dev分支工作开发完成后，切换到master分支上，在master分支合并dev分支 git checkout master
2.git merge dev 完成将dev分支成果合并到master上 ，git merge命令用于合并指定分支到当前分支。
合并完成后，提示 Fast-forward ,Git告诉我们，这次合并是快进模式，就是把master指向dev的当前提交

git branch -d dev  删除dev分支

#解决冲突
冲突的原因是不同的分支在同一个文件提交了内容，导致git不知道以哪个内容为准，这时必须手动解决冲突再提交，比如在feature1分支上修改最后一行的内容，保存提交。再在master分支上修改最后一行的内容，保存后提交，这时在master分支上合并feature1分支的内容，Git无法快速合并，只能试图把各自的修改合并起来，但这种合并就可能会有冲突。
Git用 <<<<<<<  , ======= , >>>>>>> 标记出不同分支的内容，手动修改冲突部分，保存后再提交。用git log也可以看到分支合并的情况










