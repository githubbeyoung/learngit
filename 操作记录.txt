touch 操作记录.txt   创建一个操作记录的文本，用来记录执行的操作

git init   将这个目录变成git管理的仓库

git add fileName   将这个文件添加到git的暂存区

git commit -m 'remark' 将暂存区内容一次性提交到工作区间

git commit -am ‘remark’ 合并 add 和 commit 命令,前提该文件是被跟踪的文件，未被跟踪的文件--即新创建的文件不能使用这个合并命令

git add .  把工作区新增的文件和修改的文件都加入到暂存区
git add -A  把工作区新的文件，修改的文件，删除的文件都加入到暂存区
命令只能作用域当前目录及子目录

git 中的三类文件
1.被追踪的（tracked）：已经加入暂存区的
2.不被追踪的（untracked）：没有加入暂存区的
3.忽略的（ignored）：忽略那些不需要管理的文件或文件夹

git添加忽略文件，分两种情况，第一种，需要忽略的文件是被追踪的。情况二，需要添加的文件未被追踪

情况一：文件已经被追踪，这时候要把该文件忽略，需要以下几个步骤
1.在工作区新建一个文件，命名为 .gitignore ,在这个文件里写上哪些文件需要被忽略，比如 .gitignore .idea  .class  .target 等等
2.清空git的版本库，将所有的文件变成未被追踪的文件， git rm -r --cached .
3.再将文件都加入到版本库，那么在 .gitignore 中的文件就被自动忽略掉了

情况二：文件尚未被git追踪
1.在工作区新建一个文件，命名为 .gitignore ,写入需要被忽略的文件
2.直接将文件添加到版本库，未被追踪的文件就不会再被git管理了

git clean --df 【是从工作目录中移除没有track的文件】
git rm --cached fileName||path 【将文件或者路径从远程reposity、本地暂存域中删除，在本地工作空间中保留，主要针对和项目本身无关的不小心提交到服务器的文件】


git config user.username 'username'   设置用户名
git config user.email 'email@xxx.com'   设置邮箱

git log 查看历史记录
git reflog 记录每次的命令，也能查看 commit_id ，commit_id 可用于回退或恢复到指定版本

git reset --hard HEAD^ 回退到上一个版本
git reset --hard HEAD^^ 回退到上两个版本
git reset --hard HEAD~10 回退到上10个版本
git reset --hard commit_id 回退或恢复到指定版本，commit_id 不必写全，git会自动查找

git diff HEAD -- fineName 查看工作区和版本库里面最新版本区别

小结：git中有工作区和暂存区，每次add命令，将工作区的内容添加到暂存区，commit的时候，将暂存区的内容提交到git版本库中，如果修改的内容不用git add到暂存区，commit就不会提交到版本库

git checkout -- fileName  撤销修改，工作区间内修改了文件内容，但是并没有提交到暂存区，即没有add，用这个命令直接撤销修改.注意 这个命令的 -- 很重要，没有它就变成切换到另一个分支的命令

#如何从git上删除一个文件，下面三个命令就完成了删除操作，也可省略git add fileName 命令，也可完成删除操作
rm fileName / git rm fileName 从工作区删除文件
git add fileName / git add . 将工作区的修改添加到暂存区
git commit -m 'xxx' 将暂存区的数据提交到版本库

#添加远程仓库 
1.登录GitHub，在GitHub上创建一个Git仓库
2.在Repository name 上填入一个仓库名，起一个learngit点击创建
3.在本地仓库下运行 git remote add origin git@github.com:GitHub账户名/learngit.git，本地仓库关联远程仓库
4.git push -u origin master，将本地仓库所有内容推送到远程仓库上

将本地仓库内容推送到远程，用git push 命令，实际是把当前分支master推送到远程，由于远程仓库是空的，第一次
推送master分支时，加上-u参数，git不但会把本地的master分支内容推送到远程的新的master分支，还会把本地的分支
和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令

#拉取远程仓库上的内容
git pull

#从远程仓库拉取内容
1.登录GitGub,在上面创建一个新的仓库，如果已经有一个仓库，则直接拉取该仓库内容
2.新建一个文件夹，打开Git Base Here（按住Shift键，鼠标右击选择）,在命令窗口输入
  命令：git clone git@github.com:GitHub账户名/仓库名.git ,项目就从远程拉取到本地
        git clone -b 分支名 资源地址 --clone指定分支

#分支管理 创建与合并分支
git branch dev  创建一个dev分支
git checkout dev  切换到dev分支
git checkout -b dev   创建并切换到dev分支，相当于合并以上两条命令

git branch  列出本地所有分支，当前分支前面会标一个*号
git branch -a 【列出本地+远程所有分支】
git checkout -b 本地分支名称 origin/远程分支名  自动创建一个本地分支，与指定的远程分支关联起来

--把dev分支的工作成果合并到master上
1.dev分支工作开发完成后，切换到master分支上，在master分支合并dev分支 git checkout master
2.git merge dev 完成将dev分支成果合并到master上 ，git merge命令用于合并指定分支到当前分支。
合并完成后，提示 Fast-forward ,Git告诉我们，这次合并是快进模式，就是把master指向dev的当前提交

git branch -d dev  删除dev分支
git push origin :远程分支名

#解决冲突
冲突的原因是不同的分支在同一个文件提交了内容，导致git不知道以哪个内容为准，这时必须手动解决冲突再提交，比如在feature1分支上修改最后一行的内容，保存提交。再在master分支上修改最后一行的内容，保存后提交，这时在master分支上合并feature1分支的内容，Git无法快速合并，只能试图把各自的修改合并起来，但这种合并就可能会有冲突。
Git用 <<<<<<<  , ======= , >>>>>>> 标记出不同分支的内容，手动修改冲突部分，保存后再提交。用git log也可以看到分支合并的情况

#分支管理策略
通常，合并分支时候，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分子信息，如果强制禁用Fast forward模式，Git在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。 --no-f 为禁用 Fast forward 模式
git merge --no-f -m '在no-ff模式下合并分支'

#stash
有一个场景，在dev分支上实现一个需求，需要用一天的时间才能开发完，干了半天，线上提一个bug，必须马上解决，这时你的开发没完成，不能提交，还要解决bug，这时需要将开发的代码暂时保存起来，但是还没有提交到暂存区，用git stash命令，接着用git status查看，发现工作区是干净的，这时候就可以解决bug了，把bug解决完提交代码，回过头继续开发需求，需要找到我们开发到一半的代码，用 git stash list查看，代码还在，需要恢复一下，两个方法，一、git stash apply 恢复，恢复后 stash内容不会删除，用git stash drop来删除
；二、git stash pop 恢复的同时，把stash内容也删除。

git stash  把当前工作空间保存起来，并没有添加到git的暂存区
git stash list  查看被保存起来的工作空间
git stash apply 恢复被保存的工作空间，但是不会删除stash内容
git stash drop  删除stash内容
git stash pop  恢复被保存的工作空间同时删除stash的内容
git stash  apply stash@{0} ，恢复指定的stash

#Feature 分支
添加一个新功能时，不希望一些实验性质的代码把主分支搞乱，所以添加一个新功能时需要新建一个feature分支，在上面开发，完成后合并，删除该分支，现在开发一个新需求，开发完成时接到上级命令，功能砍掉，代码涉密，必须就地销毁，我们用 git branch -d feature 删除这个分支，Git提醒 feature分支还没有被合并，如果删除，将丢失修改，如果强行删除需要用到大写的 -D参数

git branch -D 分支名   强行删除未合并的分支

















场景一：远程分支有5个，本地有2个，使用命令git branch -a 只显示本地的两个分支，不显示远程分支，需要使用 git feach 命令获取远程最新分支
        但是使用该命令，还是不能获取最新分支，需要检查config配置项，修改如下，再使用 git fetch ，再使用git branch -a 就可以查看所有分支。 
		再使用 git checkout -b 本地分支名 origin/远程分支名 ,表示新建本地分支并切换与指定远程分支相关联
		[remote "origin"]
	    url = http://git.300.cn/NRCP/nrcp-api/api-order-web.git
	    fetch = +refs/heads/*:refs/remotes/origin/*
		
		














































